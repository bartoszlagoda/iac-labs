# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        working-directory: ./example-app

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/<path>/example-app/.venv
          key: ${{ runner.os }}-venv
  
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        working-directory: ./example-app
    needs: build

    steps:
    
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/<path>/example-app/.venv
          key: ${{ runner.os }}-venv
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
       #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: lint
        run: |
           poetry run task lint
      - name: formatter
        run: |
            poetry run task formatter
      - name: security
        run: poetry run task security

  unittests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        working-directory: ./example-app
    needs: lint

    steps:
      
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/work/<path>/example-app/.venv
          key: ${{ runner.os }}-venv
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
       #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Install django ${{ matrix.django-version }}
        run: poetry add "Django==${{ matrix.django-version }}"
      - name: unittests
        run: |
         poetry run pytest tests/
